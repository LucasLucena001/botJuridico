# -*- coding: utf-8 -*-
"""
Interface Web para Chatbot Jur√≠dico Inteligente
Projeto Final - P√≥s-Gradua√ß√£o iCEV - NLP

Interface moderna e intuitiva usando Gradio com:
1. Chat conversacional com hist√≥rico
2. Sistema de feedback
3. M√©tricas em tempo real
4. Explica√ß√µes sobre classifica√ß√£o
5. Indicadores de confian√ßa
"""

import gradio as gr
import json
import time
from datetime import datetime
from typing import List, Tuple, Dict
import pandas as pd

# ============================================================================
# 1. CLASSE DA INTERFACE WEB
# ============================================================================

class ChatbotWebInterface:
    """Interface web completa para o chatbot jur√≠dico."""
    
    def __init__(self, chatbot):
        self.chatbot = chatbot
        self.session_stats = {
            'total_messages': 0,
            'rag_queries': 0,
            'general_queries': 0,
            'out_of_scope_queries': 0,
            'avg_confidence': 0,
            'feedback_ratings': []
        }
        
    def process_message(self, message: str, history: List[Tuple[str, str]]) -> Tuple[str, List[Tuple[str, str]], str, str, str]:
        """
        Processa mensagem do usu√°rio e retorna resposta formatada.
        
        Returns:
            - response: Resposta do chatbot
            - updated_history: Hist√≥rico atualizado
            - classification_info: Informa√ß√µes sobre classifica√ß√£o
            - confidence_info: Informa√ß√µes sobre confian√ßa
            - sources_info: Informa√ß√µes sobre fontes
        """
        if not message.strip():
            return "", history, "", "", ""
        
        # Processar consulta
        start_time = time.time()
        response_data = self.chatbot.process_query(message)
        processing_time = time.time() - start_time
        
        # Atualizar estat√≠sticas
        self._update_session_stats(response_data)
        
        # Formatar resposta
        formatted_response = self._format_response(response_data, processing_time)
        
        # Atualizar hist√≥rico
        history.append((message, formatted_response))
        
        # Preparar informa√ß√µes adicionais
        classification_info = self._format_classification_info(response_data)
        confidence_info = self._format_confidence_info(response_data)
        sources_info = self._format_sources_info(response_data)
        
        return "", history, classification_info, confidence_info, sources_info
    
    def _format_response(self, response_data: Dict, processing_time: float) -> str:
        """Formata a resposta do chatbot para exibi√ß√£o."""
        response = response_data['answer']
        
        # Adicionar informa√ß√µes de processamento
        footer = f"\n\n---\n"
        footer += f"‚è±Ô∏è Processado em {processing_time:.2f}s | "
        footer += f"üéØ Classifica√ß√£o: {response_data['classification']} | "
        footer += f"üìä Confian√ßa: {response_data.get('confidence', 0):.2f}"
        
        if response_data.get('sources'):
            footer += f" | üìö {len(response_data['sources'])} fonte(s)"
        
        return response + footer
    
    def _format_classification_info(self, response_data: Dict) -> str:
        """Formata informa√ß√µes sobre classifica√ß√£o."""
        classification = response_data['classification']
        confidence_scores = response_data.get('classification_confidence', {})
        
        info = f"üéØ **Classifica√ß√£o:** {classification}\n\n"
        
        # Explicar o que significa cada classifica√ß√£o
        explanations = {
            'rag_required': "Esta pergunta requer busca na base de conhecimento jur√≠dico.",
            'calculation_required': "Esta pergunta parece requerer c√°lculos espec√≠ficos.",
            'general_conversation': "Esta √© uma conversa geral, n√£o requer consulta jur√≠dica.",
            'out_of_scope': "Esta pergunta est√° fora do escopo jur√≠dico do sistema."
        }
        
        info += f"**Explica√ß√£o:** {explanations.get(classification, 'Classifica√ß√£o n√£o reconhecida')}\n\n"
        
        # Mostrar scores de confian√ßa para cada categoria
        if confidence_scores:
            info += "**Scores por categoria:**\n"
            for category, score in sorted(confidence_scores.items(), key=lambda x: x[1], reverse=True):
                percentage = score * 100
                info += f"- {category}: {percentage:.1f}%\n"
        
        return info
    
    def _format_confidence_info(self, response_data: Dict) -> str:
        """Formata informa√ß√µes sobre confian√ßa."""
        confidence = response_data.get('confidence', 0)
        confidence_level = response_data.get('confidence_level', 'Desconhecida')
        
        # Emoji baseado na confian√ßa
        if confidence > 0.8:
            emoji = "üü¢"
            color = "green"
        elif confidence > 0.6:
            emoji = "üü°"
            color = "orange"
        else:
            emoji = "üî¥"
            color = "red"
        
        info = f"{emoji} **N√≠vel de Confian√ßa:** {confidence_level}\n\n"
        info += f"**Score num√©rico:** {confidence:.3f}\n\n"
        
        # Explicar o que significa o n√≠vel de confian√ßa
        if confidence > 0.8:
            info += "**Interpreta√ß√£o:** Alta confian√ßa - a resposta provavelmente est√° correta e bem fundamentada."
        elif confidence > 0.6:
            info += "**Interpreta√ß√£o:** Confian√ßa moderada - a resposta pode estar correta, mas recomenda-se verifica√ß√£o."
        elif confidence > 0.3:
            info += "**Interpreta√ß√£o:** Baixa confian√ßa - a resposta pode n√£o estar completa ou precisa."
        else:
            info += "**Interpreta√ß√£o:** Confian√ßa muito baixa - recomenda-se reformular a pergunta."
        
        return info
    
    def _format_sources_info(self, response_data: Dict) -> str:
        """Formata informa√ß√µes sobre fontes utilizadas."""
        sources = response_data.get('sources', [])
        context_used = response_data.get('context_used', False)
        
        if not context_used or not sources:
            return "üìö **Fontes:** Nenhuma fonte espec√≠fica foi consultada para esta resposta."
        
        info = f"üìö **Fontes consultadas:** {len(sources)} documento(s)\n\n"
        
        for i, source in enumerate(sources[:5], 1):  # Mostrar at√© 5 fontes
            # Limpar nome da fonte
            clean_source = source.replace('_', ' ').replace('.txt', '')
            info += f"{i}. {clean_source}\n"
        
        if len(sources) > 5:
            info += f"\n... e mais {len(sources) - 5} fonte(s)."
        
        info += "\n\n**Nota:** As fontes listadas foram utilizadas para formular a resposta baseada na legisla√ß√£o brasileira."
        
        return info
    
    def _update_session_stats(self, response_data: Dict):
        """Atualiza estat√≠sticas da sess√£o."""
        self.session_stats['total_messages'] += 1
        
        classification = response_data['classification']
        if classification == 'rag_required':
            self.session_stats['rag_queries'] += 1
        elif classification == 'general_conversation':
            self.session_stats['general_queries'] += 1
        elif classification == 'out_of_scope':
            self.session_stats['out_of_scope_queries'] += 1
        
        # Atualizar confian√ßa m√©dia
        confidence = response_data.get('confidence', 0)
        current_avg = self.session_stats['avg_confidence']
        total_msgs = self.session_stats['total_messages']
        
        self.session_stats['avg_confidence'] = (
            (current_avg * (total_msgs - 1) + confidence) / total_msgs
        )
    
    def add_feedback(self, rating: int, comment: str = "") -> str:
        """Adiciona feedback do usu√°rio."""
        if not (1 <= rating <= 5):
            return "‚ùå Por favor, selecione uma avalia√ß√£o entre 1 e 5 estrelas."
        
        # Adicionar ao chatbot
        self.chatbot.add_feedback(rating, comment)
        
        # Atualizar estat√≠sticas locais
        self.session_stats['feedback_ratings'].append(rating)
        
        return f"‚úÖ Obrigado pelo seu feedback! Avalia√ß√£o: {rating}/5 estrelas"
    
    def get_session_statistics(self) -> str:
        """Retorna estat√≠sticas da sess√£o atual."""
        stats = self.session_stats
        
        info = "üìä **Estat√≠sticas da Sess√£o**\n\n"
        info += f"**Total de mensagens:** {stats['total_messages']}\n"
        info += f"**Consultas jur√≠dicas (RAG):** {stats['rag_queries']}\n"
        info += f"**Conversas gerais:** {stats['general_queries']}\n"
        info += f"**Fora de escopo:** {stats['out_of_scope_queries']}\n"
        info += f"**Confian√ßa m√©dia:** {stats['avg_confidence']:.3f}\n"
        
        if stats['feedback_ratings']:
            avg_rating = sum(stats['feedback_ratings']) / len(stats['feedback_ratings'])
            info += f"**Avalia√ß√£o m√©dia:** {avg_rating:.1f}/5 ({len(stats['feedback_ratings'])} avalia√ß√µes)\n"
        
        return info
    
    def clear_conversation(self) -> Tuple[List, str, str, str]:
        """Limpa a conversa e reinicia a sess√£o."""
        # Reiniciar sess√£o no chatbot
        self.chatbot.conversation_manager.start_session()
        
        # Resetar estat√≠sticas
        self.session_stats = {
            'total_messages': 0,
            'rag_queries': 0,
            'general_queries': 0,
            'out_of_scope_queries': 0,
            'avg_confidence': 0,
            'feedback_ratings': []
        }
        
        return [], "", "", ""
    
    def get_example_questions(self) -> List[str]:
        """Retorna lista de perguntas exemplo."""
        return [
            "O que diz o artigo 5¬∫ da Constitui√ß√£o Federal?",
            "Qual o prazo para reclamar de v√≠cios em produtos dur√°veis?",
            "Como funciona a jornada de trabalho na CLT?",
            "O que √© considerado uni√£o est√°vel?",
            "Quais s√£o os direitos do consumidor?",
            "Como calcular rescis√£o trabalhista?",
            "O que estabelece a LGPD sobre prote√ß√£o de dados?",
            "Ol√°, como voc√™ funciona?",
            "Obrigado pela ajuda!"
        ]

# ============================================================================
# 2. CRIA√á√ÉO DA INTERFACE GRADIO
# ============================================================================

def create_gradio_interface(chatbot):
    """Cria interface Gradio completa."""
    
    # Inicializar interface
    web_interface = ChatbotWebInterface(chatbot)
    
    # CSS customizado
    custom_css = """
    .gradio-container {
        font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
    }
    .chat-message {
        padding: 10px;
        margin: 5px 0;
        border-radius: 10px;
    }
    .user-message {
        background-color: #e3f2fd;
        text-align: right;
    }
    .bot-message {
        background-color: #f5f5f5;
        text-align: left;
    }
    .info-panel {
        background-color: #fafafa;
        padding: 15px;
        border-radius: 8px;
        border-left: 4px solid #2196f3;
    }
    .confidence-high {
        color: #4caf50;
        font-weight: bold;
    }
    .confidence-medium {
        color: #ff9800;
        font-weight: bold;
    }
    .confidence-low {
        color: #f44336;
        font-weight: bold;
    }
    """
    
    # Criar interface
    with gr.Blocks(
        title="Chatbot Jur√≠dico Inteligente",
        theme=gr.themes.Soft(),
        css=custom_css
    ) as interface:
        
        # Cabe√ßalho
        gr.Markdown("""
        # ‚öñÔ∏è Chatbot Jur√≠dico Inteligente
        
        **Sistema RAG com Classifica√ß√£o Autom√°tica de Inten√ß√µes**
        
        Fa√ßa perguntas sobre a legisla√ß√£o brasileira e receba respostas fundamentadas em documentos oficiais.
        
        ---
        """)
        
        with gr.Row():
            # Coluna principal - Chat
            with gr.Column(scale=2):
                chatbot_interface = gr.Chatbot(
                    label="Conversa",
                    height=500,
                    show_label=True,
                    container=True,
                    bubble_full_width=False
                )
                
                with gr.Row():
                    msg_input = gr.Textbox(
                        placeholder="Digite sua pergunta jur√≠dica aqui...",
                        label="Sua mensagem",
                        lines=2,
                        max_lines=5,
                        show_label=False,
                        container=False
                    )
                    send_btn = gr.Button("Enviar", variant="primary", size="sm")
                
                # Bot√µes de a√ß√£o
                with gr.Row():
                    clear_btn = gr.Button("üóëÔ∏è Limpar Conversa", size="sm")
                    stats_btn = gr.Button("üìä Ver Estat√≠sticas", size="sm")
                
                # Exemplos de perguntas
                gr.Examples(
                    examples=web_interface.get_example_questions(),
                    inputs=msg_input,
                    label="üí° Perguntas de exemplo:"
                )
            
            # Coluna lateral - Informa√ß√µes
            with gr.Column(scale=1):
                # Painel de classifica√ß√£o
                classification_panel = gr.Markdown(
                    "üéØ **Classifica√ß√£o da √∫ltima pergunta aparecer√° aqui**",
                    label="Classifica√ß√£o"
                )
                
                # Painel de confian√ßa
                confidence_panel = gr.Markdown(
                    "üìä **Informa√ß√µes de confian√ßa aparecer√£o aqui**",
                    label="Confian√ßa"
                )
                
                # Painel de fontes
                sources_panel = gr.Markdown(
                    "üìö **Fontes consultadas aparecer√£o aqui**",
                    label="Fontes"
                )
                
                # Sistema de feedback
                gr.Markdown("### üí¨ Feedback")
                with gr.Row():
                    rating_slider = gr.Slider(
                        minimum=1,
                        maximum=5,
                        step=1,
                        value=5,
                        label="Avalia√ß√£o (1-5 estrelas)"
                    )
                
                feedback_comment = gr.Textbox(
                    placeholder="Coment√°rio opcional...",
                    label="Coment√°rio",
                    lines=2,
                    max_lines=3
                )
                
                feedback_btn = gr.Button("Enviar Feedback", variant="secondary", size="sm")
                feedback_status = gr.Markdown("")
                
                # Estat√≠sticas da sess√£o
                session_stats = gr.Markdown(
                    "üìä **Estat√≠sticas da sess√£o aparecer√£o aqui**",
                    label="Estat√≠sticas"
                )
        
        # Rodap√© com informa√ß√µes
        gr.Markdown("""
        ---
        
        ### ‚ÑπÔ∏è Como usar:
        
        1. **Digite sua pergunta** sobre legisla√ß√£o brasileira
        2. **Aguarde a resposta** com classifica√ß√£o autom√°tica
        3. **Verifique as fontes** consultadas no painel lateral
        4. **Avalie a resposta** para ajudar a melhorar o sistema
        
        ### ‚ö†Ô∏è Importante:
        - Este sistema tem fins educacionais e informativos
        - N√£o substitui consulta jur√≠dica profissional
        - Sempre verifique informa√ß√µes com um advogado qualificado
        
        ### üîß Funcionalidades:
        - ‚úÖ Classifica√ß√£o autom√°tica de inten√ß√µes
        - ‚úÖ Sistema RAG com busca sem√¢ntica
        - ‚úÖ Indicadores de confian√ßa
        - ‚úÖ Rastreamento de fontes
        - ‚úÖ Hist√≥rico de conversas
        - ‚úÖ Sistema de feedback
        """)
        
        # Eventos da interface
        
        # Enviar mensagem
        def handle_message(message, history):
            return web_interface.process_message(message, history)
        
        # Configurar eventos
        msg_input.submit(
            handle_message,
            inputs=[msg_input, chatbot_interface],
            outputs=[msg_input, chatbot_interface, classification_panel, confidence_panel, sources_panel]
        )
        
        send_btn.click(
            handle_message,
            inputs=[msg_input, chatbot_interface],
            outputs=[msg_input, chatbot_interface, classification_panel, confidence_panel, sources_panel]
        )
        
        # Limpar conversa
        clear_btn.click(
            web_interface.clear_conversation,
            outputs=[chatbot_interface, classification_panel, confidence_panel, sources_panel]
        )
        
        # Ver estat√≠sticas
        stats_btn.click(
            web_interface.get_session_statistics,
            outputs=session_stats
        )
        
        # Enviar feedback
        feedback_btn.click(
            web_interface.add_feedback,
            inputs=[rating_slider, feedback_comment],
            outputs=feedback_status
        )
    
    return interface

# ============================================================================
# 3. FUN√á√ÉO PRINCIPAL PARA EXECUTAR A INTERFACE
# ============================================================================

def launch_web_interface(chatbot, share=False, server_port=7860):
    """Lan√ßa a interface web do chatbot."""
    
    print("üåê Criando interface web...")
    interface = create_gradio_interface(chatbot)
    
    print("üöÄ Iniciando servidor web...")
    print(f"üì± Interface dispon√≠vel em: http://localhost:{server_port}")
    
    if share:
        print("üåç Link p√∫blico ser√° gerado...")
    
    # Lan√ßar interface
    interface.launch(
        share=share,
        server_port=server_port,
        server_name="0.0.0.0",  # Permite acesso externo
        show_error=True,
        quiet=False,
        favicon_path=None,
        ssl_verify=False
    )

# ============================================================================
# 4. EXEMPLO DE USO
# ============================================================================

def main():
    """Fun√ß√£o principal para executar a interface web."""
    try:
        # Importar e inicializar chatbot
        from chatbot_juridico_inteligente import ChatbotJuridicoInteligente
        
        print("ü§ñ Inicializando Chatbot Jur√≠dico Inteligente...")
        chatbot = ChatbotJuridicoInteligente()
        
        print("‚úÖ Chatbot inicializado com sucesso!")
        
        # Lan√ßar interface web
        launch_web_interface(
            chatbot=chatbot,
            share=False,  # Mude para True se quiser link p√∫blico
            server_port=7860
        )
        
    except Exception as e:
        print(f"‚ùå Erro ao inicializar: {e}")
        print("üí° Verifique se todos os arquivos est√£o no local correto")

if __name__ == "__main__":
    main()